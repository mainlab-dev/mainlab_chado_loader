<?php
/**
 * @file
 * Contains functions used to install/uninstall MCL module
 */
/**
 * Implementation of hook_install().
 *
 * @ingroup
 */
function mcl_install() {

  // Populates table with default values.
  mcl_populate_table_defaults();
}

/**
 * Implementation of hook_uninstall().
 *
 */
function mcl_uninstall() {
  // Remove MCL directories.
}

/**
 * Implementation of hook_schema().
 *
 */
function mcl_schema() {
  $schema = array();
  mcl_add_table_mcl_var($schema);
  mcl_add_table_mcl_user($schema);
  mcl_add_table_mcl_file($schema);
  mcl_add_table_mcl_job($schema);
  mcl_add_table_mcl_template($schema);
  mcl_add_table_mcl_template_type($schema);
  mcl_add_table_mcl_data_valid_type($schema);
  mcl_add_table_mcl_data_valid($schema);
  return $schema;
}

/**
 * Adds mcl_var table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_var(&$schema) {
  $schema['mcl_var'] = array(
    'fields' => array(
      'var_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'varchar',
        'length' => '1024',
      ),
      'description' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array('var_id'),
    'unique keys' => array(
      'ukey_mcl_var_001' => array('name')
    ),
  );
}

/**
 * Adds mcl_user table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_user(&$schema) {
  $schema['mcl_user'] = array(
    'fields' => array(
      'user_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'prop' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('user_id'),
  );
}

/**
 * Adds mcl_template table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_template(&$schema) {
  $schema['mcl_template'] = array(
    'fields' => array(
      'template_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'template' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'template_type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'public' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('template_id'),
    'unique keys' => array(
      'ukey_mcl_template_001' => array('template')
    ),
  );
}

/**
 * Adds mcl_template_type table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_template_type(&$schema) {
  $schema['mcl_template_type'] = array(
    'fields' => array(
      'template_type_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('template_type_id'),
    'unique keys' => array(
      'ukey_mcl_template_type_001' => array('type')
    ),
  );
}

/**
 * Adds mcl_data_valid_type table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_data_valid_type(&$schema) {
  $schema['mcl_data_valid_type'] = array(
    'fields' => array(
      'data_valid_type_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cv_id' => array(
        'type' => 'int',
      ),
    ),
    'primary key' => array('data_valid_type_id'),
    'unique keys' => array(
      'ukey_mcl_data_valid_type_001' => array('type')
    ),
  );
}

/**
 * Adds mcl_data_valid table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_data_valid(&$schema) {
  $schema['mcl_data_valid'] = array(
    'fields' => array(
      'data_valid_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'data_valid_type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cvterm_id' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('data_valid_id'),
    'unique keys' => array(
      'ukey_mcl_data_valid_001' => array('data_valid_type_id', 'name')
    ),
  );
}

/**
 * Adds mcl_file table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_file(&$schema) {
  $schema['mcl_file'] = array(
    'fields' => array(
      'file_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'filepath' => array(
        'type' => 'varchar',
        'length' => '512',
        'not null' => TRUE,
      ),
      'filesize' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uri' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'user_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'job_id' => array(
        'type' => 'int',
      ),
      'submit_date' => array(
        'type' => 'datetime',
        'mysql_type' => 'datetime',                     // The equivalent MySQL data type
        'pgsql_type' => 'timestamp without time zone',  // The equivalent PostgreSQL data type
        'not null' => TRUE,
      ),
    'prop' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array('file_id'),
  );
}

/**
 * Adds mcl_job table.
 *
 * @param  $schema
 */
function mcl_add_table_mcl_job(&$schema) {
  $schema['mcl_job'] = array(
    'fields' => array(
      'job_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'class_name' => array(
        'type' => 'varchar',
        'length' => '255',
      ),
      'status' => array(
        'type' => 'int',
      ),
      'param' => array(
        'type' => 'text',
      ),
      'prop' => array(
        'type' => 'text',
      ),
      'user_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'submit_date' => array(
        'type' => 'datetime',
        'mysql_type' => 'datetime',                     // The equivalent MySQL data type
        'pgsql_type' => 'timestamp without time zone',  // The equivalent PostgreSQL data type
        'not null' => TRUE,
      ),
      'complete_date' => array(
        'type' => 'datetime',
        'mysql_type' => 'datetime',                     // The equivalent MySQL data type
        'pgsql_type' => 'timestamp without time zone',  // The equivalent PostgreSQL data type
      ),
    ),
    'primary key' => array('job_id'),
  );
}

/**
 * Populates table with default values.
 *
 */
function mcl_populate_table_defaults() {
  $module_path = drupal_get_path('module', 'mcl');

  // Includes .inc file.
  require_once("$module_path/includes/mcl.inc");

  // Registers autoloader.
  require_once "$module_path/includes/class/mcl_class_loader.class.inc";
  $bims_autoloader = new MCL_CLASS_LOADER();
  $bims_autoloader->register();

  // Populates mcl_var table.
  mcl_populate_mcl_var();

  // Populates mcl_template and mcl_template_type tables.
  mcl_populate_mcl_templates();

  // Populates mcl_data_type table.
  mcl_populate_mcl_data_valid_type();
}

/**
 * Populates mcl_var table.
 *
 */
function mcl_populate_mcl_var() {

  // Gets null/default value.
  $null_cvterm  = MCL_CHADO_CVTERM::addNull();
  $null_pub     = MCL_CHADO_PUB::addNull();
  $na_organism  = MCL_CHADO_ORGANISM::addNA();
  $na_location  = MCL_CHADO_LOCATION::addNA();

  // Adds MCL global variables.
  $mcl_vars = array(
    'SITE_DB'               => array('type' => 'SITE',    'value' => 'MAIN',                             'desc' => 'The name of the site specific DB'),
    'SITE_CV'               => array('type' => 'SITE',    'value' => 'MAIN',                             'desc' => 'The name of the site specific CV'),
    'SITE_TRAIT_ONTOLOGY'   => array('type' => 'SITE',    'value' => 'rosaceae_trait_ontology',          'desc' => 'CV.name for site specific trait ontology'),
    'CVTERM_ID'             => array('type' => 'DEFAULT', 'value' => $null_cvterm->getCvtermID(),        'desc' => 'dummy cvterm ID. It is used for type_id of NULL pub.'),
    'PUB_ID'                => array('type' => 'DEFAULT', 'value' => $null_pub->getPubID(),              'desc' => 'dummy pub ID. It is used for chado.cvterm_feature.pub_id.'),
    'ORGANISM_ID'           => array('type' => 'DEFAULT', 'value' => $na_organism->getOrganismID(),      'desc' => 'dummy organism ID. It is used for organism ID of a linkage group.'),
    'ND_GEOLOCATION_ID'     => array('type' => 'DEFAULT', 'value' => $na_location->getNdGeolocationID(), 'desc' => 'chado.nd_geolocation.nd_geolocation_id for "Not Available"'),
  );

  // Adds variables.
  foreach ($mcl_vars as $name => $prop) {
    if (!MCL_VAR::addVar($prop['type'], $name, $prop['value'], $prop['desc'])) {
      print "\nError : Failed to add a variable.\n\n";
      exit;
    }
  }
}

/**
 * Populates mcl_template and mcl_template_type tables.
 *
 */
function mcl_populate_mcl_templates() {

  // Default template types.
  $template_types = array(
    'ORGANISM',
    'DB',
    'CV',
    'TRAIT',
    'CVTERM',
    'ORGANISM',
    'CONTACT',
    'LIBRARY',
    'DATASET',
    'DESCRIPTOR',
    'SITE',
    'STOCK',
    'PROGENY',
    'CROSS',
    'MARKER',
    'MTL',
    'QTL',
    'MAP',
    'MAP_POSITION',
    'FIELD_BOOK',
    'PHENOTYPE',
    'GENOTYPE',
    'IMAGE',
    'IMAGE_PHENOTYPE',
    'IMAGE_GENOTYPE',
  );

  // Adds template types.
  $rank = 20;
  foreach ($template_types as $template_type) {
    $details = array(
      'type' => $template_type,
    );
    $mcl_template_type = MCL_TEMPLATE_TYPE::byKey($details);
    if ($mcl_template_type) {
      print "\n$template_type already existed.\n\n";
    }
    else {
      $details['rank'] = $rank;
      $mcl_template_type = new MCL_TEMPLATE_TYPE($details);
      if (!$mcl_template_type->insert()) {
        print "\nError : Failed to add a template type\n\n";
        exit;
      }
      $rank += 10;
    }
  }

  // Adds templates.
  MCL_TEMPLATE::updateTemplates();
}

/**
 * Populates mcl_data_valid_type and mcl_data_valid tables.
 *
 */
function mcl_populate_mcl_data_valid_type() {

  // Add data valid types.
  $data_valid_types = array(
    'contact_type'      => 'SITE_CV',
    'descriptor_format' => '',
    'descriptor_type'   => '',
    'stock_type'        => 'SITE_CV',
    'location_type'     => '',
    'trait_category'    => 'SITE_TRAIT_ONTOLOGY',
  );

  // Adds contact types.
  $data_types['contact_type'] = array(
    'person',
    'institution',
    'organization',
    'lab',
    'database',
    'company',
  );

  // Adds descriptor types.
  $data_types['descriptor_type'] = array(
    'qualitative',
    'quantitative_code',
    'quantitative',
    'code',
    'date',
    'filepath',
    'text',
  );

  // Adds stock types.
  $data_types['stock_type'] = array(
    'breeding_research_material',
    'variety',
    'cultivar',
    'population',
    'wild_unimproved',
    'tbd',
    'landrace',
    'germplasm',
    'species',
    'breeding_germplasm',
  );

  // Add location types.
  $data_types['location_type'] = array(
    'orchard',
    'seedling block',
    'open field',
    'greenhouse',
  );

  // Adds trait categories.
  $data_types['trait_category'] = array(
    'biochemical trait',
    'quality trait',
    'stature or vigor trait',
    'sterility or fertility trait',
    'stress trait',
    'yield trait',
    'plant morphology trait',
    'biological process trait',
    'other miscellaneous trait',
    'plant growth and development trait',
  );

  // Adds data valid types to databases.
  foreach ($data_valid_types as $data_valid_type => $cv_name) {

    // Sets the type.
    $details = array(
      'type' => $data_valid_type,
    );

    // Gets cv_id.
    $cv_id = '';
    if ($cv_name) {
      $cv = MCL_CHADO_CV::getCV($cv_name);
      if (!$cv) {
        continue;
      }
      $cv_id = $cv->getCvID();
      $details['cv_id'] = $cv_id;
    }
    
    // Adds data valid type.
    $mcl_data_valid_type = new PUBLIC_MCL_DATA_VALID_TYPE($details);
    if (!$mcl_data_valid_type->insert()) {
      print "Failed to add $data_valid_type\n";
      return FALSE;
    }

    // Adds data valid.
    $data_valid_type_id = $mcl_data_valid_type->getDataValidTypeID();
    foreach ($data_types[$data_valid_type] as $value) {
      $details = array(
        'data_valid_type_id' => $data_valid_type_id,
        'name'               => $value,
      );
      if ($cv_name) {
        $cvterm = MCL_CHADO_CVTERM::getCvterm($cv_name, $value);
        if (!$cvterm) {
          print "Warning : Skipped : Cannot found cvterm_id of ($cv_name, $value)\n";
          continue;
        }
        $details['cvterm_id'] = $cvterm->getCvtermID();
      }
      $mcl_data_valid = new PUBLIC_MCL_DATA_VALID($details);
      if (!$mcl_data_valid->insert()) {
        print "Failed to add $value\n";
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Update function defined below.
 */
/**
 * Adds mcl_data_type table and populate it.
 */
function mcl_update_7019() {

  // Registers autoloader.
  $module_path = drupal_get_path('module', 'mcl');
  require_once "$module_path/includes/class/mcl_class_loader.class.inc";
  $bims_autoloader = new MCL_CLASS_LOADER();
  $bims_autoloader->register();

  $transaction = db_transaction();
  try {
    if (!db_table_exists('mcl_data_valid_type')) {
      $schema = array();
      mcl_add_table_mcl_data_valid_type($schema);
      db_create_table('mcl_data_valid_type', $schema['mcl_data_valid_type']);

      $schema = array();
      mcl_add_table_mcl_data_valid($schema);
      db_create_table('mcl_data_valid', $schema['mcl_data_valid']);

      // Populate tables.
      if (!mcl_populate_mcl_data_valid_type()) {
        throw new Exception("Failed to populate mcl_data_valid_type table");
      }
    }
  }
  catch (\Exception $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException($error);
  }
}
